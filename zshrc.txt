# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
ZSH_THEME=powerlevel10k/powerlevel10k
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  osx
  vi-mode
)

function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/Users/Josh/.vimpkg/bin"

alias ls="ls -a"
alias python="python3"

# SoFi functions
 kssh() {
     env="dev"

     if [[ "$1" == *"staging"* ]] then
        ssh samsung-external-staging-0.sofitest.com -tt "sudo su - sofi"
     else 
       if [[ $#  -eq 1 ]]; then
           echo "one"-
           number="$1"
       elif [[ $# -eq 2 ]]; then
           env="$1"
           number="$2"
       else
           echo "bad # of args"
           exit 1
       fi
       ssh kraken-$env-$number -tt "sudo su - sofi"
     fi

 }

jdk() {
        version=$1
        export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
        java -version
 }

jdk 21

function ocr () {
 # local USE_DATE=$(gdate --date="7 day ago" +%Y-%m-%d)
 local USE_DATE=2022-06-28
 local CONFLUENCE_KEY="fU3SCSDZcdWIBCHx2un5E6E5"
 local OPSGENIE_KEY="5ec47d0e-3dc4-43fa-8e27-e52378bcd534"
 local TEAM_NAME="money_growth"
 local CURRDIR=$(pwd)
 local CMDTORUN="python3 ocr.py --start_date $USE_DATE --confluence_key $CONFLUENCE_KEY --opsgenie_key $OPSGENIE_KEY --team $TEAM_NAME"

 cd ~/git/oncallreports

 gecho $CMDTORUN

 cd $CURRDIR
}

aws_switch () {
  local OPTIND OKTA_CREDS opt COMP_TIME
  while getopts ":fh" opt; do
    case ${opt} in
      f )
        OKTA_CREDS=true
        ;;
      h )
        echo "aws_switch [-f] <aws_profile>" && echo "  -f    force OKTA 2FA" && echo && return
        ;;
    esac
  done
  shift $((OPTIND -1))
  COMP_TIME=$(gdate -d '120 minutes ago' +%s)
  CRED_TIME=$(gstat -c %Y ~/.aws/credentials)
  [[ "${COMP_TIME}" > "${CRED_TIME}" ]] &&  OKTA_CREDS=true
  [ "$OKTA_CREDS" = true ] && gimme-aws-creds
  export AWS_PROFILE=$1
}
complete -W "$(grep '^\[.*profile' ~/.aws/config | sed -e 's/profile//g' | sed 's/[[:space:]]*//g' | cut -d"[" -f2 | cut -d"]" -f1 | paste -d" " -s -)" aws_switch
export DBT_USER=jhinkle
export DBT_ROLE=TDM_MONEY_CONSUMER_PRIVATE_READ_ONLY
export DBT_DATABASE=TDM_MONEY_CLONE_JHINKLE
export DBT_WAREHOUSE=TDM_MONEY_CLONE
export DBT_PROFILES_DIR=/Users/jhinkle/git/tdm-money/dbt
export DBT_REGION=us-west-2

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:/Applications/IntelliJ IDEA.app/Contents/MacOS:$PATH"
alias sb="./gradlew spotlessApply && ./gradlew build"
export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completio